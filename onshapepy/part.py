'''
part
====

OnShape part that maps to a part studio
'''

from onshapepy.core.client import Client
import json
from onshapepy.uri import Uri
import pint
u = pint.UnitRegistry()
q = u.Quantity


class Part():
    """A part is used to configure a part studio. This reflects a part at a specific OnShape version. Anything that
    updates the part will then create a new instance of part to be used.


    """

    def __init__(self, url, params=None, client=Client()):
        """
        Args:
            - url (str): the url of the Part Studio
            - params (dict, opt): dict of parameter objects. These are objects that return valid parameter settings
                when encoded as a string.
        """
        self.uri = Uri(url)
        self.config = Config(url)

        #post defined params if necessary
        if params:
            self.config.update(params)
        else:
            self.config.get_params()
        self.client = client

    @property
    def params(self):
        return self.config.params

    def set(self, dict):
        """Set configuration variables for an OnShape part."""
        self.config.update(dict)


class Config:
    """The collection of configuration values. This class simplifies interacting with the configuration REST API and
    some caching to reduce wait times."""

    def __init__(self, url, client=Client()):
        """Holds the configuration state specified by the uri. The most recent server response is held in raw_res. This
        is used to generate a list of easier to understand and serialize dictionary of config values."""
        self.uri = Uri(url)
        self.client = client
        self.res = None

    @property
    def payload(self):
        return json.loads(self.res.content.decode("utf-8"))

    def update(self, params=None):
        """Push params to OnShape and synchronize the local copy
        """
        if not params or not self.res:
            self.get_params()
            return
        for k, v in params.items():
            d = self.payload
            try:
                d["currentConfiguration"][self.parameter_map[k]]["message"]["expression"] = str(v)
            except KeyError:
                d["currentConfiguration"][self.parameter_map[k]]["message"]["value"] = str(v)

        res = self.client.update_configuration(self.uri.did, self.uri.wvm, self.uri.eid, json.dumps(d))

        # If it was a good request, update config to be consistent with online.
        if res.status_code == 200:
            self.res = res

    def get_params(self):
        """Manually pull params defined in config from OnShape and return a python representation of the params.
        Quantities are converted to pint quantities, Bools are converted to python bools and Enums are converted
        to strings. Note that Enum names are autogenerated by OnShape and do not match the name on the OnShape UI."""
        self.res = self.client.get_configuration(self.uri.as_dict())

    @property
    def params(self):
        """Get the params of response data from the API.

        Returns
        -------
        d: dict
            Dictionary mapping of all configuration values
        """
        payload = self.payload
        d = {}
        parameter_map = {}
        for i, p in enumerate(payload["currentConfiguration"]):
            type_name = p["typeName"]
            name = payload["configurationParameters"][i]["message"]["parameterName"]
            if type_name == "BTMParameterQuantity":
                try:
                    v = q(p["message"]["expression"])
                except:
                    v = q(p["message"]["value"], p["message"]["units"])
            elif type_name == "BTMParameterBoolean":
                v = p["message"]["value"]
            elif type_name == "BTMParameterEnum":
                v = p["message"]["value"]
            d[name] = v
        return d

    @property
    def parameter_map(self):
        payload = self.payload
        parameter_map = {}
        for i, p in enumerate(payload["currentConfiguration"]):
            name = payload["configurationParameters"][i]["message"]["parameterName"]
            parameter_map[name] = i
        return parameter_map

class OutputDims:
    pass
