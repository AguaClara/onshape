'''
part
====

OnShape part that maps to a part studio
'''

from onshapepy.core.client import Client
import json
from onshapepy.uri import Uri
import pint
u = pint.UnitRegistry()
q = u.Quantity


class Part():
    """A part is used to configure a part studio. This reflects a part at a specific OnShape version. Anything that
    updates the part will then create a new instance of part to be used.


    """

    def __init__(self, url, params=None, client=Client()):
        """
        Args:
            - url (str): the url of the Part Studio
            - params (dict, opt): dict of parameter objects. These are objects that return valid parameter settings
                when encoded as a string.
        """
        self.uri = Uri(url)
        self.config = Config(url)
        self.config.set(params)
        self.client = client
        self.params = self.config.get_params()


class Config:
    """The collection of configuration values. This class simplifies interacting with the configuration REST API"""

    def __init__(self, url, client=Client()):
        """Holds the configuration state specified by the uri. The most recent server response is held in raw_res. This
        is used to generate a list of easier to understand and serialize dictionary of config values."""
        self.uri = Uri(url)
        self.client = client
        self.raw = None
        self.parameter_map = {}

    def set(self, params):
        """Specify the name of a config parameter and its value and set it in the payload."""
        pass

    def post_params(self, params):
        """Manually push params passed in to the current configuration in Onshape
        """
        for k, v in params.items():
            try:
                self.raw["currentConfiguration"][self.parameter_map[k]]["message"]["expression"] = str(v)
            except KeyError:
                self.raw["currentConfiguration"][self.parameter_map[k]]["message"]["value"] = str(v)

        return self.client.update_configuration(self.uri.did, self.uri.wvm, self.uri.eid, json.dumps(self.raw))


    def get_params(self):
        """Manually pull params defined in config from OnShape and return a python representation of the params.
        Quantities are converted to pint quantities, Bools are converted to python bools and Enums are converted
        to strings. Note that Enum names are autogenerated by OnShape and do not match the name on the OnShape UI."""
        res = self.client.get_configuration(self.uri.as_dict())
        self.raw = json.loads(res.content.decode("utf-8"))
        d = {}
        for i, p in enumerate(self.raw["currentConfiguration"]):
            type_name = p["typeName"]
            name = self.raw["configurationParameters"][i]["message"]["parameterName"]
            if type_name == "BTMParameterQuantity":
                try:
                    v = q(p["message"]["expression"])
                except:
                    v = q(p["message"]["value"], p["message"]["units"])
            elif type_name == "BTMParameterBoolean":
                v = p["message"]["value"]
            elif type_name == "BTMParameterEnum":
                v = p["message"]["value"]
            d[name] = v
            self.parameter_map[name] = i
        return d


class OutputDims:
    pass
